<?php

/**
 * @file
 * Contains hook implementations for this module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 */
function openai_embeddings_entity_insert(EntityInterface $entity) {
  openai_embeddings_insert_queue_item($entity);
}

/**
 * Implements hook_entity_update().
 */
function openai_embeddings_entity_update(EntityInterface $entity) {
  openai_embeddings_insert_queue_item($entity);
}

/**
 * Implements hook_entity_delete().
 */
function openai_embeddings_entity_delete(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface) {
    $plugin_id = \Drupal::configFactory()
      ->get('openai_embeddings.settings')
      ->get('vector_client_plugin');
    if ($plugin_id) {
      $vector_client = \Drupal::service('plugin.manager.vector_client')->createInstance($plugin_id);

      try {
        $records = \Drupal::database()->select('openai_embeddings', 'e')
          ->fields('e', ['entity_id', 'entity_type', 'field_name'])
          ->condition('entity_id', $entity->id())
          ->condition('entity_type', $entity->getEntityTypeId())
          ->execute();

        foreach ($records as $record) {
          $vector_client->delete([
            'collection' => $record->entity_type . ':' . $record->field_name,
            'filter' => [
              'entity_id' => $entity->id(),
              'entity_type' => $entity->getEntityTypeId(),
              'bundle' => $entity->bundle(),
            ],
          ]);
        }
      } catch (\Exception $e) {
        \Drupal::logger('openai_embeddings')
          ->error('Error trying to delete record(s) in the vector database.');
      }
    }

    try {
      \Drupal::database()->delete('openai_embeddings')
        ->condition('entity_id', $entity->id())
        ->condition('entity_type', $entity->getEntityTypeId())
        ->execute();
    } catch (\Exception $e) {
      \Drupal::logger('openai_embeddings')
        ->error('Error trying to delete record(s) in the local database.');
    }
  }
}

/**
 * Inserts a content entity into the job queue.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The content entity.
 */
function openai_embeddings_insert_queue_item($entity) {
  $config = \Drupal::config('openai_embeddings.settings');
  $entity_types = $config->get('entity_types');

  if (!empty($entity_types) && array_key_exists($entity->getEntityTypeId(), $entity_types)) {
    if (in_array($entity->bundle(), $entity_types[$entity->getEntityTypeId()])) {
      $queue = \Drupal::service('queue')->get('embedding_queue');
      $item = [];
      $item['entity_id'] = $entity->id();
      $item['entity_type'] = $entity->getEntityTypeId();
      $item['bundle'] = $entity->bundle();
      $queue->createItem($item);
    }
  }
}
